import os, time, requests, json, logging
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("astro.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

HEYGEN_API_KEY = os.getenv("HEYGEN_API_KEY")
HEYGEN_AVATAR_ID = os.getenv("HEYGEN_AVATAR_ID", "")
HEYGEN_TEMPLATE_ID = os.getenv("HEYGEN_TEMPLATE_ID", "")  # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è template-based

# HeyGen —Ä–∞–±–æ—Ç–∞–µ—Ç –õ–£–ß–®–ï —Å templates, —á–µ–º —Å direct generation
USE_TEMPLATE_MODE = bool(HEYGEN_TEMPLATE_ID)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ UI)
VIDEO_CONFIG = {
    "use_avatar": True,  # True = —Å –∞–≤–∞—Ç–∞—Ä–æ–º, False = —Ç–æ–ª—å–∫–æ —Ñ–æ–Ω
    "background_url": "",  # URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–∞
    "voice": "en-US-Neural2-F",  # –ì–æ–ª–æ—Å
    "duration": 30,  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    "dimension": {"width": 1080, "height": 1920}  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
}

def update_video_config(use_avatar=None, background_url=None, voice=None, duration=None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    global VIDEO_CONFIG
    if use_avatar is not None:
        VIDEO_CONFIG["use_avatar"] = use_avatar
    if background_url is not None:
        VIDEO_CONFIG["background_url"] = background_url
    if voice is not None:
        VIDEO_CONFIG["voice"] = voice
    if duration is not None:
        VIDEO_CONFIG["duration"] = max(15, min(60, int(duration)))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 15-60 —Å–µ–∫
    logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {VIDEO_CONFIG}")

def submit_to_heygen(script: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ HeyGen, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –∑–∞–¥–∞—á–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 2 —Ä–µ–∂–∏–º–∞:
    1. Template-based (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) - –µ—Å–ª–∏ HEYGEN_TEMPLATE_ID –∑–∞–¥–∞–Ω
    2. Direct generation - –µ—Å–ª–∏ HEYGEN_TEMPLATE_ID –ø—É—Å—Ç
    """
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¢–û–ß–ù–û –∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ HeyGen
    headers = {
        "accept": "application/json",
        "content-type": "application/json",
        "x-api-key": HEYGEN_API_KEY
    }
    
    # –†–ï–ñ–ò–ú 1: Template-based generation (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π)
    if USE_TEMPLATE_MODE and HEYGEN_TEMPLATE_ID:
        return _submit_via_template(script, headers)
    
    # –†–ï–ñ–ò–ú 2: Direct generation (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
    return _submit_direct(script, headers)


def _submit_via_template(script: str, headers: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ HeyGen Template (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Ç–æ–¥)."""
    
    logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º Template mode: {HEYGEN_TEMPLATE_ID}")
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è template
    variables = {
        "LLM_bulletin": {  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è text variable
            "name": "LLM_bulletin",
            "type": "text",
            "properties": {"content": script}
        }
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º voice –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    voice_id = VIDEO_CONFIG.get("voice", "en-US-Neural2-F")
    variables["voice_llm"] = {
        "name": "voice_llm",
        "type": "voice",
        "properties": {"voice_id": voice_id}
    }
    
    payload = {
        "caption": False,
        "title": f"AI24TV-{int(time.time())}",
        "variables": variables
    }
    
    url = f"https://api.heygen.com/v2/template/{HEYGEN_TEMPLATE_ID}/generate"
    
    logger.info(f"üöÄ POST {url}")
    logger.debug(f"Payload: {json.dumps(payload, indent=2)}")
    
    try:
        r = requests.post(url, headers=headers, json=payload, timeout=60)
        
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {r.status_code}")
        logger.debug(f"–û—Ç–≤–µ—Ç: {r.text}")
        
        r.raise_for_status()
        
        response_data = r.json()
        video_id = response_data.get("data", {}).get("video_id")
        
        if not video_id:
            raise ValueError(f"–ù–µ –ø–æ–ª—É—á–µ–Ω video_id: {response_data}")
        
        logger.info(f"‚úÖ Template video —Å–æ–∑–¥–∞–Ω: {video_id}")
        return video_id
        
    except Exception as e:
        logger.error(f"‚ùå Template generation failed: {e}")
        logger.warning("üí° –ü–æ–ø—ã—Ç–∫–∞ fallback –Ω–∞ direct generation...")
        return _submit_direct(script, headers)


def _submit_direct(script: str, headers: dict) -> str:
    """Direct video generation (–∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥, —Ç—Ä–µ–±—É–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π Avatar ID)."""
    
    logger.info(f"üé¨ –ò—Å–ø–æ–ª—å–∑—É–µ–º Direct generation mode")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Avatar ID
    if not HEYGEN_AVATAR_ID or HEYGEN_AVATAR_ID == "your_avatar_id_here":
        raise RuntimeError(
            "‚ùå Direct generation —Ç—Ä–µ–±—É–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π HEYGEN_AVATAR_ID!\n"
            "–†–µ—à–µ–Ω–∏—è:\n"
            "1. –£–∫–∞–∂–∏—Ç–µ HEYGEN_TEMPLATE_ID –≤ .env (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
            "2. –ò–õ–ò —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π HEYGEN_AVATAR_ID –∏–∑ https://app.heygen.com/avatars"
        )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π payload —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    # –í–ê–ñ–ù–û: video_inputs –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù!
    
    # video_inputs - –º–∞—Å—Å–∏–≤ —Å—Ü–µ–Ω
    video_input = {
        "voice": {
            "type": "text",
            "input_text": script,
            "voice_id": VIDEO_CONFIG.get("voice", "en-US-Neural2-F")
        }
    }
    
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä
    if VIDEO_CONFIG.get("use_avatar", True):
        video_input["character"] = {
            "type": "avatar",
            "avatar_id": HEYGEN_AVATAR_ID,
            "avatar_style": "normal"
        }
        logger.info(f"–†–µ–∂–∏–º: –° –∞–≤–∞—Ç–∞—Ä–æ–º ({HEYGEN_AVATAR_ID})")
    else:
        logger.info(f"–†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ —Ñ–æ–Ω (–±–µ–∑ –∞–≤–∞—Ç–∞—Ä–∞)")
    
    # –§–æ–Ω
    if VIDEO_CONFIG.get("background_url"):
        video_input["background"] = {
            "type": "image",
            "url": VIDEO_CONFIG["background_url"]
        }
        logger.info(f"–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω: {VIDEO_CONFIG['background_url']}")
    elif not VIDEO_CONFIG.get("use_avatar", True):
        video_input["background"] = {
            "type": "color",
            "value": "#1a1a2e"
        }
        logger.info("–¶–≤–µ—Ç–Ω–æ–π —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    # –ë–∞–∑–æ–≤—ã–π payload - —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    payload = {
        "video_inputs": [video_input],  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!
        "dimension": {
            "width": VIDEO_CONFIG.get("dimension", {}).get("width", 1080),
            "height": VIDEO_CONFIG.get("dimension", {}).get("height", 1920)
        },
        "test": False,
        "caption": False
    }
    
    # –°–ø–∏—Å–æ–∫ endpoints –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ (fallback)
    endpoints_to_try = [
        "https://api.heygen.com/v2/videos",  # –ù–æ–≤—ã–π CREATE endpoint
        "https://api.heygen.com/v2/video/generate",  # –°—Ç–∞—Ä—ã–π generate
    ]
    
    last_error = None
    
    for url in endpoints_to_try:
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ POST-–∑–∞–ø—Ä–æ—Å–∞ –≤ HeyGen API...")
            logger.info(f"URL: {url}")
            logger.debug(f"Headers: {headers}")
            logger.debug(f"Payload: {json.dumps(payload, indent=2)}")
            
            r = requests.post(url, headers=headers, json=payload, timeout=60)
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            logger.info(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {r.status_code}")
            logger.debug(f"–û—Ç–≤–µ—Ç: {r.text}")
            
            # –ï—Å–ª–∏ 404 - –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π endpoint
            if r.status_code == 404:
                logger.warning(f"404 –¥–ª—è {url}, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π endpoint...")
                last_error = f"404 –¥–ª—è {url}"
                continue
            
            r.raise_for_status()
            
            response_data = r.json()
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è video_id
            video_id = (
                response_data.get("data", {}).get("video_id") or
                response_data.get("video_id") or
                response_data.get("data", {}).get("id")
            )
            
            if not video_id:
                logger.error(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç HeyGen: {json.dumps(response_data, indent=2)}")
                raise ValueError(f"–ù–µ –ø–æ–ª—É—á–µ–Ω video_id –æ—Ç HeyGen: {response_data}")
            
            logger.info(f"‚úÖ –í–∏–¥–µ–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {video_id}")
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω endpoint: {url}")
            
            return video_id
            
        except requests.exceptions.RequestException as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –¥–ª—è {url}: {e}")
            last_error = e
            continue
    
    # –ï—Å–ª–∏ –≤—Å–µ endpoints –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    error_msg = f"–í—Å–µ endpoints –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}"
    logger.error(error_msg)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    try:
        from bot_simple import send_error_notification
        import asyncio
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π event loop, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        try:
            loop = asyncio.get_event_loop()
            if loop.is_closed():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
        asyncio.create_task(send_error_notification(f"‚ùå –û—à–∏–±–∫–∞ HeyGen: {error_msg}"))
    except Exception as ex:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {ex}")
    
    raise RuntimeError(error_msg)

def wait_video(video_id: str, timeout=900, progress_callback=None) -> str:
    """–ñ–¥—ë—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä—è–º–æ–π URL."""
    status_url = f"https://api.heygen.com/v1/video_status.get?video_id={video_id}"
    
    headers = {
        "X-Api-Key": HEYGEN_API_KEY,
        "Content-Type": "application/json"
    }
    
    logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤–∏–¥–µ–æ {video_id}...")
    
    start_time = time.time()
    check_interval = 10  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    
    for iteration in range(timeout // check_interval):
        try:
            r = requests.get(status_url, headers=headers, timeout=30)
            r.raise_for_status()
            
            response = r.json()
            data = response.get("data", {})
            status = data.get("status", "unknown")
            
            elapsed = int(time.time() - start_time)
            logger.info(f"–°—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ [{elapsed}s]: {status}")
            
            # –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è UI
            if progress_callback:
                progress_callback(status, elapsed)
            
            if status == "completed":
                video_url = data.get("video_url") or data.get("url")
                if video_url:
                    logger.info(f"‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ: {video_url}")
                    return video_url
                else:
                    logger.error(f"‚ùå –í–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ URL –Ω–µ –Ω–∞–π–¥–µ–Ω: {data}")
                    raise ValueError("Video completed but no URL provided")
                
            if status == "failed":
                error_msg = data.get("error", "Unknown error")
                logger.error(f"‚ùå HeyGen —Å–æ–æ–±—â–∏–ª –æ–± –æ—à–∏–±–∫–µ: {error_msg}")
                raise RuntimeError(f"HeyGen failed: {error_msg}")
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
            time.sleep(check_interval)
            
        except requests.RequestException as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {iteration+1}): {e}")
            time.sleep(check_interval)
            continue
    
    # Timeout
    logger.error(f"‚ùå Timeout: –≤–∏–¥–µ–æ –Ω–µ –±—ã–ª–æ –≥–æ—Ç–æ–≤–æ –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
    raise TimeoutError(f"Video {video_id} was not ready in {timeout} seconds")

def render_video(script: str, progress_callback=None) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL.
    –ü—Ä–æ–±—É–µ—Ç HeyGen, –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç open-source fallback.
    """
    try:
        logger.info("üé¨ –ù–∞—á–∞–ª–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤–∏–¥–µ–æ")
        
        # –ü—Ä–æ–±—É–µ–º HeyGen
        try:
            video_id = submit_to_heygen(script)
            video_url = wait_video(video_id, progress_callback=progress_callback)
            logger.info(f"‚úÖ HeyGen –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {video_url}")
            return video_url
        except RuntimeError as heygen_error:
            # –ï—Å–ª–∏ HeyGen –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º open-source
            error_msg = str(heygen_error)
            if "HEYGEN_AVATAR_ID" in error_msg or "HEYGEN_TEMPLATE_ID" in error_msg:
                logger.warning(f"‚ö†Ô∏è HeyGen –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {heygen_error}")
                logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ open-source –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä...")
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º open-source
                try:
                    from opensource_video import render_video_opensource
                    video_url = render_video_opensource(script, progress_callback)
                    logger.info(f"‚úÖ Open-source –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {video_url}")
                    return video_url
                except ImportError:
                    logger.error("‚ùå –ú–æ–¥—É–ª—å opensource_video –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install moviepy gtts pillow")
                    raise RuntimeError(
                        "HeyGen –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ open-source –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                        "–†–µ—à–µ–Ω–∏–µ:\n"
                        "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ HeyGen (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è): —É–∫–∞–∂–∏—Ç–µ HEYGEN_TEMPLATE_ID –≤ .env\n"
                        "2. –ò–õ–ò —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install moviepy gtts pillow"
                    )
                except Exception as os_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ open-source –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {os_error}")
                    raise RuntimeError(
                        f"HeyGen –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ open-source –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {os_error}\n"
                        "–†–µ—à–µ–Ω–∏–µ: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ HEYGEN_TEMPLATE_ID –≤ .env"
                    )
            else:
                # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ HeyGen - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
                raise
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: {e}")
        raise

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ n8n webhook
def render_video_via_n8n(script: str) -> str:
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ n8n webhook."""
    n8n_webhook = os.getenv("N8N_WEBHOOK_URL")
    
    if not n8n_webhook:
        logger.warning("N8N_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π API")
        return render_video(script)
    
    try:
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ n8n...")
        response = requests.post(n8n_webhook, json={"script": script}, timeout=60)
        response.raise_for_status()
        
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ n8n –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç video_url
        video_url = response.json().get("video_url")
        
        if video_url:
            logger.info(f"‚úÖ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ n8n: {video_url}")
            return video_url
        else:
            raise ValueError("n8n –Ω–µ –≤–µ—Ä–Ω—É–ª video_url")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ n8n, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –ø—Ä—è–º–æ–π API: {e}")
        return render_video(script)
