"""
Open-Source –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ HeyGen
–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å —Ñ–æ–Ω–∞–º–∏ (–∫–æ—Å–º–æ—Å, –ø–ª–∞–Ω–µ—Ç—ã, —ç–∑–æ—Ç–µ—Ä–∏–∫–∞) –∏ AI –≥–æ–ª–æ—Å–æ–º
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ HeyGen –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∫–∞–∫ fallback
"""

import os
import logging
import requests
from pathlib import Path
import tempfile

# –õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç —Ç—è–∂–µ–ª—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω—ã)
# MoviePy –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –¥–æ–ª–≥–æ, –ø–æ—ç—Ç–æ–º—É –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö

# –î–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ TTS (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
COQUI_AVAILABLE = False
try:
    from TTS.api import TTS as CoquiTTS
    COQUI_AVAILABLE = True
except ImportError:
    pass

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
TEMP_DIR = Path(tempfile.gettempdir()) / "ai24tv"
TEMP_DIR.mkdir(exist_ok=True)

# ElevenLabs API configuration
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY") or os.getenv("ELEVEN_LABS_API_KEY")

# –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ–æ–Ω—ã –¥–ª—è —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º
BACKGROUND_URLS = {
    "space": [
        "https://images.unsplash.com/photo-1419242902214-272b3f66ee7a?w=1920&h=1080&fit=crop",  # –ú–ª–µ—á–Ω—ã–π –ø—É—Ç—å
        "https://images.unsplash.com/photo-1462331940025-496dfbfc7564?w=1920&h=1080&fit=crop",  # –ö–æ—Å–º–æ—Å
        "https://images.unsplash.com/photo-1446776653964-20c1d3a81b06?w=1920&h=1080&fit=crop",  # –ó–≤–µ–∑–¥—ã
    ],
    "planets": [
        "https://images.unsplash.com/photo-1614732414444-096e5f1122d5?w=1920&h=1080&fit=crop",  # –ü–ª–∞–Ω–µ—Ç–∞
        "https://images.unsplash.com/photo-1614728894747-a83421e2b9c9?w=1920&h=1080&fit=crop",  # –õ—É–Ω–∞
        "https://images.unsplash.com/photo-1608889825197-79df9699be90?w=1920&h=1080&fit=crop",  # –°–∞—Ç—É—Ä–Ω
    ],
    "mystical": [
        "https://images.unsplash.com/photo-1518531933037-91b2f5f229cc?w=1920&h=1080&fit=crop",  # –¢—É–º–∞–Ω–Ω–æ—Å—Ç—å
        "https://images.unsplash.com/photo-1506318137071-a8e063b4bec0?w=1920&h=1080&fit=crop",  # –ù–æ—á—å
        "https://images.unsplash.com/photo-1519681393784-d120267933ba?w=1920&h=1080&fit=crop",  # –ì–æ—Ä—ã –Ω–æ—á—å—é
    ],
    "astrology": [
        "https://images.unsplash.com/photo-1532693322450-2cb5c511067d?w=1920&h=1080&fit=crop",  # –ó–æ–¥–∏–∞–∫
        "https://images.unsplash.com/photo-1534796636912-3b95b3ab5986?w=1920&h=1080&fit=crop",  # –ó–≤–µ–∑–¥–Ω–æ–µ –Ω–µ–±–æ
        "https://images.unsplash.com/photo-1464802686167-b939a6910659?w=1920&h=1080&fit=crop",  # –ó–≤–µ–∑–¥—ã –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º
    ]
}


def download_background(category: str = "space", index: int = 0) -> Path:
    """–°–∫–∞—á–∞—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    try:
        urls = BACKGROUND_URLS.get(category, BACKGROUND_URLS["space"])
        url = urls[index % len(urls)]
        
        bg_file = TEMP_DIR / f"bg_{category}_{index}.jpg"
        
        if bg_file.exists():
            logger.info(f"–§–æ–Ω —É–∂–µ —Å–∫–∞—á–∞–Ω: {bg_file}")
            return bg_file
        
        logger.info(f"–°–∫–∞—á–∏–≤–∞—é —Ñ–æ–Ω: {url}")
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        
        with open(bg_file, 'wb') as f:
            f.write(response.content)
        
        logger.info(f"‚úÖ –§–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {bg_file}")
        return bg_file
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ–Ω–∞: {e}")
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω –∫–∞–∫ fallback
        return create_gradient_background()


def create_gradient_background(width: int = 1920, height: int = 1080) -> Path:
    """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω (fallback)"""
    try:
        from PIL import Image, ImageDraw
        
        bg_file = TEMP_DIR / "bg_gradient.jpg"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        img = Image.new('RGB', (width, height))
        draw = ImageDraw.Draw(img)
        
        for y in range(height):
            # –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Ç–µ–º–Ω–æ-—Å–∏–Ω–µ–≥–æ –∫ —á–µ—Ä–Ω–æ–º—É
            r = int(10 * (1 - y/height))
            g = int(20 * (1 - y/height))
            b = int(40 * (1 - y/height))
            draw.line([(0, y), (width, y)], fill=(r, g, b))
        
        img.save(bg_file, 'JPEG', quality=85)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω: {bg_file}")
        return bg_file
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞: {e}")
        raise


def generate_voice_coqui(text: str, lang: str = "ru") -> Path:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ Coqui TTS (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)"""
    try:
        audio_file = TEMP_DIR / f"voice_coqui_{hash(text)}.wav"
        
        if audio_file.exists():
            logger.info(f"–ì–æ–ª–æ—Å —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {audio_file}")
            return audio_file
        
        logger.info(f"üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ Coqui TTS ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        if lang == "ru":
            model_name = "tts_models/ru/ruslan/tacotron2-DDC"
        else:
            model_name = "tts_models/en/ljspeech/tacotron2-DDC"
        
        tts = CoquiTTS(model_name=model_name, progress_bar=False, gpu=False)
        tts.tts_to_file(text=text, file_path=str(audio_file))
        
        logger.info(f"‚úÖ –ì–æ–ª–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω (Coqui): {audio_file}")
        return audio_file
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ Coqui TTS: {e}, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ Google TTS")
        return generate_voice_gtts(text, lang)


def generate_voice_gtts(text: str, lang: str = "ru", slow: bool = False, log_callback=None) -> Path:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ Google TTS (–±–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)"""
    try:
        from gtts import gTTS
        
        audio_file = TEMP_DIR / f"voice_gtts_{hash(text)}.mp3"
        
        if audio_file.exists():
            logger.info(f"–ì–æ–ª–æ—Å —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {audio_file}")
            return audio_file
        
        logger.info(f"üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ Google TTS ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)...")
        
        # Google TTS
        tts = gTTS(text=text, lang=lang, slow=slow)
        tts.save(str(audio_file))
        
        logger.info(f"‚úÖ –ì–æ–ª–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω (Google): {audio_file}")
        if log_callback:
            log_callback("‚úÖ –ì–æ–ª–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω (Google)")
        return audio_file
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞: {e}")
        raise


def generate_voice_elevenlabs(text: str, voice_id: str, log_callback=None) -> Path:
    """Generate voice using ElevenLabs API with selected voice"""
    if not ELEVENLABS_API_KEY:
        logger.warning("‚ö†Ô∏è  ELEVENLABS_API_KEY not set, falling back to gTTS")
        if log_callback:
            log_callback("‚ö†Ô∏è  ElevenLabs not configured, using gTTS")
        return generate_voice_gtts(text, "ru", False, log_callback)
    
    try:
        logger.info(f"üéôÔ∏è  Generating audio with ElevenLabs voice: {voice_id}")
        if log_callback:
            log_callback(f"üéôÔ∏è  Using ElevenLabs voice")
        
        url = f"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}"
        
        headers = {
            "Accept": "audio/mpeg",
            "Content-Type": "application/json",
            "xi-api-key": ELEVENLABS_API_KEY
        }
        
        data = {
            "text": text,
            "model_id": "eleven_multilingual_v2",
            "voice_settings": {
                "stability": 0.5,
                "similarity_boost": 0.75,
                "style": 0.5,
                "use_speaker_boost": True
            }
        }
        
        response = requests.post(url, json=data, headers=headers, timeout=30)
        response.raise_for_status()
        
        # Save audio
        audio_path = TEMP_DIR / f"elevenlabs_{voice_id[:8]}.mp3"
        with open(audio_path, "wb") as f:
            f.write(response.content)
        
        logger.info(f"‚úÖ ElevenLabs audio generated: {audio_path}")
        if log_callback:
            log_callback(f"‚úÖ Voice generated with ElevenLabs")
        
        return audio_path
        
    except Exception as e:
        logger.error(f"‚ùå ElevenLabs error: {e}, falling back to gTTS")
        if log_callback:
            log_callback(f"‚ö†Ô∏è  ElevenLabs failed, using gTTS")
        return generate_voice_gtts(text, "ru", False, log_callback)


def generate_voice(text: str, lang: str = "ru", slow: bool = False, use_premium: bool = True, log_callback=None) -> Path:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–≤–∏–∂–æ–∫
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
        lang: –Ø–∑—ã–∫ (ru, en, etc.)
        slow: –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ—á—å (—Ç–æ–ª—å–∫–æ –¥–ª—è gTTS)
        use_premium: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Coqui TTS –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    """
    if use_premium and COQUI_AVAILABLE:
        try:
            return generate_voice_coqui(text, lang)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Coqui TTS: {e}")
    
    # Fallback –Ω–∞ Google TTS
    return generate_voice_gtts(text, lang, slow, log_callback)


def create_opensource_video(
    script: str,
    *,
    background_category: str = "space",
    background_index: int = 0,
    voice_lang: str = "ru",
    voice_slow: bool = False,
    width: int = 1080,
    height: int = 1920,
    add_subtitles: bool = True,
    output_path: Path = None,
    log_callback=None,
    custom_background_path: str = None,
    text_position: str = "center",
    voice_id: str = None
) -> Path:
    """
    –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ —Å open-source –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    
    Args:
        script: –¢–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è
        background_category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ñ–æ–Ω–∞ (space, planets, mystical, astrology)
        background_index: –ò–Ω–¥–µ–∫—Å —Ñ–æ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        voice_lang: –Ø–∑—ã–∫ –≥–æ–ª–æ—Å–∞ (ru, en, etc.)
        custom_background_path: Custom background image path (overrides category)
        text_position: Text position (top, center, bottom)
        voice_id: ElevenLabs voice ID for TTS
        voice_slow: –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ—á—å
        width: –®–∏—Ä–∏–Ω–∞ –≤–∏–¥–µ–æ
        height: –í—ã—Å–æ—Ç–∞ –≤–∏–¥–µ–æ
        add_subtitles: –î–æ–±–∞–≤–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã
        output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    
    Returns:
        Path –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MoviePy 2.x (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
        from moviepy.audio.io.AudioFileClip import AudioFileClip
        from moviepy.video.VideoClip import ImageClip, TextClip
        from moviepy.video.compositing.CompositeVideoClip import CompositeVideoClip
        
        logger.info(f"üé¨ –°–æ–∑–¥–∞–Ω–∏–µ open-source –≤–∏–¥–µ–æ...")
        logger.info(f"   –§–æ–Ω: {background_category}")
        logger.info(f"   –°–∫—Ä–∏–ø—Ç: {len(script)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 1. –°–∫–∞—á–∏–≤–∞–µ–º/—Å–æ–∑–¥–∞–µ–º —Ñ–æ–Ω (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º custom)
        if custom_background_path:
            logger.info(f"üñºÔ∏è  Custom background requested: {custom_background_path}")
            
            # Convert URL to filesystem path
            if custom_background_path.startswith('/storage/'):
                # URL format: /storage/backgrounds/filename.jpg
                # Convert to: STORAGE_ROOT/backgrounds/filename.jpg
                from .. import storage as storage_module
                if storage_module.STORAGE_ROOT:
                    relative_path = custom_background_path.replace('/storage/', '')
                    bg_path = storage_module.STORAGE_ROOT / relative_path
                    logger.info(f"üîÑ Converted URL to path: {bg_path}")
                else:
                    logger.error(f"‚ùå STORAGE_ROOT not initialized!")
                    bg_path = Path(custom_background_path)
            else:
                # Already a filesystem path
                bg_path = Path(custom_background_path)
            
            if bg_path.exists():
                bg_image = bg_path
                logger.info(f"‚úÖ Using custom background: {bg_image}")
                if log_callback:
                    log_callback(f"‚úÖ Custom background: {bg_image.name}")
            else:
                logger.warning(f"‚ö†Ô∏è  Custom background not found at {bg_path}, using default")
                if log_callback:
                    log_callback(f"‚ö†Ô∏è  Custom background not found, using default")
                bg_image = download_background(
                    category=background_category,
                    index=background_index
                )
        else:
            logger.info(f"üñºÔ∏è  Using auto-detected background: {background_category}")
            bg_image = download_background(category=background_category, index=background_index)
            if log_callback:
                log_callback(f"‚úÖ Background category: {background_category}")
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å (—Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º voice_id –µ—Å–ª–∏ –µ—Å—Ç—å)
        if log_callback:
            log_callback(f"üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å{f' ({voice_id})' if voice_id else ''}...")
        
        if voice_id:
            # Use ElevenLabs with selected voice
            logger.info(f"üé§ Using ElevenLabs voice: {voice_id}")
            if log_callback:
                log_callback(f"üé§ Voice: ElevenLabs ({voice_id})")
            audio_file = generate_voice_elevenlabs(script, voice_id, log_callback)
        else:
            # Use default (gTTS)
            logger.info(f"üé§ Using default gTTS voice (lang={voice_lang})")
            if log_callback:
                log_callback(f"üé§ Voice: gTTS ({voice_lang})")
            audio_file = generate_voice(script, lang=voice_lang, slow=voice_slow, log_callback=log_callback)
        
        # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –∏ –ø–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        audio_clip = AudioFileClip(str(audio_file))
        duration = audio_clip.duration
        
        logger.info(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration:.1f}—Å")
        if log_callback:
            log_callback(f"‚úÖ –ì–æ–ª–æ—Å –≥–æ—Ç–æ–≤! –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}—Å")
        
        # 4. –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –∫–ª–∏–ø –∏–∑ —Ñ–æ–Ω–∞
        bg_clip = ImageClip(str(bg_image)).with_duration(duration)
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (1080x1920)
        bg_clip = bg_clip.resized(height=height)
        
        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É –¥–æ –Ω—É–∂–Ω–æ–π —à–∏—Ä–∏–Ω—ã
        w, h = bg_clip.size
        x_center = w / 2
        x1 = int(x_center - width / 2)
        x2 = int(x_center + width / 2)
        bg_clip = bg_clip.cropped(x1=x1, x2=x2, y1=0, y2=height)
        
        # 5. –î–æ–±–∞–≤–ª—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        clips = [bg_clip]
        
        if add_subtitles:
            try:
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                words = script.split()
                words_per_subtitle = 5
                subtitle_duration = duration / (len(words) / words_per_subtitle)
                
                subtitle_clips = []
                for i in range(0, len(words), words_per_subtitle):
                    subtitle_text = " ".join(words[i:i+words_per_subtitle])
                    start_time = i / words_per_subtitle * subtitle_duration
                    
                    txt_clip = TextClip(
                        text=subtitle_text,
                        font_size=40,
                        color='white',
                        font='Arial',
                        stroke_color='black',
                        stroke_width=2,
                        method='caption',
                        size=(width - 100, None)
                    ).with_position(('center', height - 200))
                    
                    txt_clip = txt_clip.with_start(start_time).with_duration(
                        min(subtitle_duration, duration - start_time)
                    )
                    
                    subtitle_clips.append(txt_clip)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –∫ –≤–∏–¥–µ–æ
                clips.extend(subtitle_clips)
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(subtitle_clips)} —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
                
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã: {e}")
        
        # 6. –ö–æ–º–ø–æ–∑–∏—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
        final_clip = CompositeVideoClip(clips, size=(width, height))
        final_clip = final_clip.with_audio(audio_clip)
        
        # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
        if output_path is None:
            output_path = TEMP_DIR / f"video_{hash(script)}.mp4"
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ: {output_path}")
        if log_callback:
            log_callback("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤–∏–¥–µ–æ...")
        
        final_clip.write_videofile(
            str(output_path),
            fps=24,
            codec='libx264',
            audio_codec='aac',
            temp_audiofile=str(TEMP_DIR / "temp_audio.m4a"),
            remove_temp=True,
            logger=None  # –û—Ç–∫–ª—é—á–∞–µ–º verbose –≤—ã–≤–æ–¥
        )
        
        # 8. –û—á–∏—Å—Ç–∫–∞
        audio_clip.close()
        final_clip.close()
        
        logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {output_path}")
        logger.info(f"   –†–∞–∑–º–µ—Ä: {output_path.stat().st_size / 1024 / 1024:.1f} MB")
        if log_callback:
            size_mb = output_path.stat().st_size / 1024 / 1024
            log_callback(f"‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! ({size_mb:.1f} MB)")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º tuple (video_path, audio_path)
        return (output_path, audio_file)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
        raise


# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å HeyGen API
def render_video_opensource(script: str, progress_callback=None, log_callback=None, text_position="center", custom_background=None, voice_id=None) -> tuple:
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å renderer.py
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple (video_url, audio_url) - –ø—É—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
    
    Args:
        script: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
        progress_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (status, elapsed)
        log_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        text_position: Position of text (top, center, bottom)
        custom_background: Custom background image path/URL
        voice_id: ElevenLabs voice ID for TTS
    
    Returns:
        tuple: (video_url, audio_url)
    """
    logger.info(f"üìä Opensource render with: position={text_position}, voice={voice_id}, bg={custom_background is not None}")
    try:
        if progress_callback:
            progress_callback("processing", 0)
        
        # Use custom background or auto-detect category
        if custom_background:
            # Use custom background directly
            category = "custom"
            logger.info(f"üñºÔ∏è  Using custom background: {custom_background}")
            if log_callback:
                log_callback(f"üñºÔ∏è  Custom background: {custom_background}")
        else:
            # Auto-detect category from script
            script_lower = script.lower()
            
            if any(word in script_lower for word in ["–ø–ª–∞–Ω–µ—Ç–∞", "planet", "–º–∞—Ä—Å", "–≤–µ–Ω–µ—Ä–∞"]):
                category = "planets"
            elif any(word in script_lower for word in ["–∑–æ–¥–∏–∞–∫", "–≥–æ—Ä–æ—Å–∫–æ–ø", "–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è", "zodiac"]):
                category = "astrology"
            elif any(word in script_lower for word in ["–º–∏—Å—Ç–∏–∫–∞", "–º–∞–≥–∏—è", "—Ç–∞—Ä–æ", "mystical"]):
                category = "mystical"
            else:
                category = "space"
            
            logger.info(f"üìÇ Auto-detected background category: {category}")
            if log_callback:
                log_callback(f"üìÇ Background category: {category}")
        
        if progress_callback:
            progress_callback("processing", 30)
        
        # Log voice selection
        if voice_id:
            logger.info(f"üéôÔ∏è  Using selected voice: {voice_id}")
            if log_callback:
                log_callback(f"üéôÔ∏è  Voice: {voice_id}")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —Å custom settings
        if log_callback:
            log_callback("üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ...")
        
        video_path, audio_path = create_opensource_video(
            script=script,
            background_category=category,
            background_index=0,
            voice_lang="ru",
            add_subtitles=True,
            log_callback=log_callback,
            custom_background_path=custom_background if custom_background else None,
            text_position=text_position,
            voice_id=voice_id
        )
        
        if progress_callback:
            progress_callback("completed", 100)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç–∏ –∫–∞–∫ tuple (video_url, audio_url)
        video_url = f"file://{video_path.absolute()}"
        audio_url = str(audio_path.absolute()) if audio_path else ""
        return (video_url, audio_url)
        
    except Exception as e:
        if progress_callback:
            progress_callback("failed", 0)
        raise


if __name__ == "__main__":
    # –¢–µ—Å—Ç
    test_script = """
    –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –°–µ–≥–æ–¥–Ω—è –º—ã –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –≤–ª–∏—è–Ω–∏–∏ –ø–ª–∞–Ω–µ—Ç –Ω–∞ –Ω–∞—à—É –∂–∏–∑–Ω—å.
    –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è - –¥—Ä–µ–≤–Ω—è—è –Ω–∞—É–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∏–∑—É—á–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –Ω–µ–±–µ—Å–Ω—ã–º–∏ —Ç–µ–ª–∞–º–∏ –∏ –∑–µ–º–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏.
    –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!
    """
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ open-source –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤–∏–¥–µ–æ...")
    
    try:
        video_path = create_opensource_video(
            script=test_script,
            background_category="astrology",
            voice_lang="ru",
            add_subtitles=True
        )
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {video_path}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

