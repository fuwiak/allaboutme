"""Automatic scheduling service"""
import logging
from datetime import datetime, timedelta, time as dt_time
from sqlalchemy.orm import Session
from .. import models
from ..models_extended import ScheduledPost, AutomationLog

logger = logging.getLogger(__name__)


def calculate_schedule(
    db: Session,
    daily_videos: int = 10,
    start_hour: int = 7,
    end_hour: int = 24  # 00:00 = 24
) -> list[datetime]:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    
    Args:
        daily_videos: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –≤ –¥–µ–Ω—å
        start_hour: –ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (07:00)
        end_hour: –ö–æ–Ω–µ—Ü –ø—É–±–ª–∏–∫–∞—Ü–∏–π (00:00 = 24)
    
    Returns:
        –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º—ë–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    """
    today = datetime.now().date()
    
    # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã (07:00 - 00:00 = 17 —á–∞—Å–æ–≤)
    working_hours = end_hour - start_hour
    working_minutes = working_hours * 60
    
    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
    interval_minutes = working_minutes / daily_videos
    
    schedule = []
    current_time = datetime.combine(today, dt_time(hour=start_hour))
    
    for i in range(daily_videos):
        schedule.append(current_time)
        current_time += timedelta(minutes=interval_minutes)
    
    return schedule


def create_daily_schedule(db: Session):
    """
    –°–æ–∑–¥–∞—ë—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ 00:01 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        daily_videos_setting = db.query(models.Setting).filter(
            models.Setting.key == "daily_videos"
        ).first()
        daily_videos = int(daily_videos_setting.value) if daily_videos_setting else 10
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule = calculate_schedule(db, daily_videos)
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        for scheduled_time in schedule:
            scheduled_post = ScheduledPost(
                scheduled_time=scheduled_time,
                status="pending",
                publish_to_telegram=True,
                publish_to_youtube=True,
                publish_to_tiktok=True,
                publish_to_instagram=True
            )
            db.add(scheduled_post)
        
        db.commit()
        
        log_entry = AutomationLog(
            level="INFO",
            message=f"–°–æ–∑–¥–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {len(schedule)} –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
            details=f"First: {schedule[0]}, Last: {schedule[-1]}"
        )
        db.add(log_entry)
        db.commit()
        
        logger.info(f"‚úÖ Schedule created: {len(schedule)} posts")
        return {"created": len(schedule), "schedule": schedule}
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        
        log_entry = AutomationLog(
            level="ERROR",
            message="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
            details=str(e),
            notified=False
        )
        db.add(log_entry)
        db.commit()
        
        raise


def get_pending_posts(db: Session) -> list[ScheduledPost]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã, –≥–æ—Ç–æ–≤—ã–µ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ—Å—Ç—ã –≥–¥–µ:
    - scheduled_time <= now
    - status = "pending"
    """
    now = datetime.now()
    
    return db.query(ScheduledPost).filter(
        ScheduledPost.scheduled_time <= now,
        ScheduledPost.status == "pending"
    ).order_by(ScheduledPost.scheduled_time).all()


def log_automation_error(db: Session, message: str, details: str = None):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    log_entry = AutomationLog(
        level="ERROR",
        message=message,
        details=details,
        notified=False
    )
    db.add(log_entry)
    db.commit()
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    try:
        from .telegram_bot import send_error_notification
        import asyncio
        asyncio.run(send_error_notification(f"üö® –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:\n{message}\n\n{details or ''}"))
        
        log_entry.notified = True
        db.commit()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

