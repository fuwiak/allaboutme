"""Script generation service using Groq API"""
import random
import re
import logging
from groq import Groq
from sqlalchemy.orm import Session
from ..config import settings
from .. import models

logger = logging.getLogger(__name__)

# Initialize Groq client
groq_client = None
if settings.GROQ_API_KEY:
    groq_client = Groq(api_key=settings.GROQ_API_KEY)


def get_setting(db: Session, key: str, default=None):
    """Get setting from database"""
    setting = db.query(models.Setting).filter(models.Setting.key == key).first()
    return setting.value if setting else default


def generate_clean_post(scenario: str, theme: str = "", db: Session = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è/–ø—Ä–æ–º–ø—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏, –∑–≤–µ–∑–¥–æ—á–µ–∫, ##, –≥–æ—Ç–æ–≤—ã–π –¥–ª—è –æ–∑–≤—É—á–∫–∏.
    
    Args:
        scenario: –ö–æ–Ω—Ç–µ–∫—Å—Ç/–ø—Ä–æ–º–ø—Ç/—Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞
        theme: –¢–µ–º–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        db: Database session (optional)
    
    Returns:
        –ß–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
    """
    if not groq_client:
        raise ValueError("GROQ_API_KEY not configured")
    
    try:
        user_prompt = f"""–°–æ–∑–¥–∞–π –ø–æ—ç—Ç–∏—á–Ω—ã–π, –≥–ª—É–±–æ–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è:

{scenario}

–ü–∏—à–∏ –∫—Ä–∞—Å–∏–≤–æ, –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ, –º–∏—Å—Ç–∏—á–µ—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—ã, —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. 
–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –∑–≤—É—á–∞—Ç—å –∫–∞–∫ –º–µ–¥–∏—Ç–∞—Ü–∏—è –∏–ª–∏ –º—É–¥—Ä–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ.

–ü—Ä–∏–º–µ—Ä —Å—Ç–∏–ª—è:
"–¢—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Å–ª—ã—à–∞–ª, –∫–∞–∫ –º–æ–ª—á–∏—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ? –í –∫–∞–∂–¥–æ–º –≤–¥–æ—Ö–µ ‚Äî —Ç–∞–π–Ω–∞, –≤ –∫–∞–∂–¥–æ–º –≤–∑–≥–ª—è–¥–µ ‚Äî –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å. –ú—ã –∏–¥—ë–º —Å–∫–≤–æ–∑—å —Å–Ω—ã, –∏ –∫–∞–∂–¥—ã–π –º–∏–≥ ‚Äî —ç—Ç–æ –≤—ã–±–æ—Ä –º–µ–∂–¥—É —Å–≤–µ—Ç–æ–º –∏ —Ç–µ–Ω—å—é. –ü–æ–º–Ω–∏: –º–∏—Ä —Å–Ω–∞—Ä—É–∂–∏ –ª–∏—à—å —ç—Ö–æ —Ç–æ–≥–æ, —á—Ç–æ —Ä–æ–∂–¥–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è."

–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏:"""
        
        completion = groq_client.chat.completions.create(
            model="openai/gpt-oss-120b",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—ç—Ç –∏ —Ñ–∏–ª–æ—Å–æ—Ñ. –°–æ–∑–¥–∞—ë—à—å –≥–ª—É–±–æ–∫–∏–µ, –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏—Ö –≤–∏–¥–µ–æ. –ü–∏—à–∏ –∫—Ä–∞—Å–∏–≤–æ, –æ–±—Ä–∞–∑–Ω–æ, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ."},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.95,
            max_tokens=1000
        )
        
        raw_text = completion.choices[0].message.content.strip()
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç GPT ({len(raw_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        logger.info(f"üìÑ –¢–µ–∫—Å—Ç: {raw_text[:200]}...")
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —Ç–æ–ª—å–∫–æ —è–≤–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞
        clean_text = raw_text
        
        # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É
        clean_text = re.sub(r'\*\*(.+?)\*\*', r'\1', clean_text)  # **bold**
        clean_text = re.sub(r'\*(.+?)\*', r'\1', clean_text)  # *italic*
        clean_text = re.sub(r'#+\s*', '', clean_text)  # ### headers
        clean_text = re.sub(r'\[.+?\]:\s*', '', clean_text)  # [—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è]:
        clean_text = re.sub(r'\n{3,}', '\n\n', clean_text)  # –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
        clean_text = clean_text.strip()
        
        logger.info(f"‚úÖ –ß–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –≥–æ—Ç–æ–≤ ({len(clean_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        if len(clean_text) < 20:
            logger.warning(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª")
            return raw_text
        
        return clean_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –±–∞–∑–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–æ–π
        clean = re.sub(r'\*\*([^*]+)\*\*', r'\1', scenario)
        clean = re.sub(r'\*([^*]+)\*', r'\1', clean)
        clean = re.sub(r'##\s*', '', clean)
        clean = re.sub(r'\[([^\]]+)\]', '', clean)
        return clean.strip()


def generate_scripts(db: Session, count: int = 1) -> list[dict]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ
    
    Args:
        db: Database session
        count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {script, hook, caption, theme}
    """
    if not groq_client:
        raise ValueError("GROQ_API_KEY not configured")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
        themes_str = get_setting(db, "themes", "daily horoscope,funny Mercury retrograde fact")
        themes = [t.strip() for t in themes_str.split(",")]
        
        system_prompt = get_setting(
            db,
            "system_prompt",
            "You are a witty astrologer & numerologist. Write short, hooky 15-30 s video scripts about astrology, numerology, Human Design or Matrix of Destiny, always ending with a call to action. write in russian"
        )
        
        caption_template = get_setting(
            db,
            "caption_template",
            "{hook}\n\n#astrology #numerology #humandesign #shorts"
        )
        
        scripts = []
        themes_today = random.sample(themes, k=min(len(themes), count))
        
        for i in range(count):
            theme = random.choice(themes_today) if themes_today else "astrology"
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è {i+1}/{count} –Ω–∞ —Ç–µ–º—É: {theme}")
            
            user_prompt = f"Topic: {theme}. Give me a punchy 15-30 second video script."
            
            try:
                completion = groq_client.chat.completions.create(
                    model="openai/gpt-oss-120b",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    temperature=0.8,
                    max_tokens=500
                )
                
                script = completion.choices[0].message.content.strip()
                hook = script.split("\n")[0][:80]  # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ = —Ö—É–∫
                caption = caption_template.format(hook=hook)
                
                script_data = {
                    "theme": theme,
                    "script": script,
                    "hook": hook,
                    "caption": caption
                }
                
                scripts.append(script_data)
                logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π {i+1} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {hook}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è {i+1}: {e}")
                continue
        
        logger.info(f"–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scripts)}")
        return scripts
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ generate_scripts: {e}")
        raise

