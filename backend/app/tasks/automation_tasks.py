"""Celery tasks for automation"""
import logging
from datetime import datetime
from celery import group
from celery.schedules import crontab
from .celery_app import celery_app
from ..database import SessionLocal
from ..models_extended import ScheduledPost, AutomationLog
from ..services import scheduler_service
from .video_tasks import generate_scripts_task, generate_video_task
from .publish_tasks import publish_video_task

logger = logging.getLogger(__name__)


@celery_app.task
def create_daily_schedule_task():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 00:01 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    """
    db = SessionLocal()
    try:
        result = scheduler_service.create_daily_schedule(db)
        logger.info(f"Daily schedule created: {result}")
        return result
    except Exception as e:
        logger.error(f"Error creating daily schedule: {e}")
        scheduler_service.log_automation_error(
            db,
            "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
            str(e)
        )
        raise
    finally:
        db.close()


@celery_app.task
def process_pending_posts_task():
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ pending –ø–æ—Å—Ç–æ–≤
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞:
    1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç script (–µ—Å–ª–∏ –Ω–µ—Ç)
    2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç video (–µ—Å–ª–∏ –Ω–µ—Ç)
    3. –ü—É–±–ª–∏–∫—É–µ—Ç (–∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤–æ)
    """
    db = SessionLocal()
    try:
        pending_posts = scheduler_service.get_pending_posts(db)
        
        if not pending_posts:
            logger.info("No pending posts to process")
            return {"processed": 0}
        
        logger.info(f"Processing {len(pending_posts)} pending posts...")
        
        for post in pending_posts:
            try:
                # 1. Generate script if not exists
                if not post.script_id:
                    logger.info(f"Generating script for post {post.id}")
                    result = generate_scripts_task.delay(1)
                    # Mark as in progress
                    post.status = "generating_script"
                    db.commit()
                    continue
                
                # 2. Generate video if not exists
                if not post.video_id:
                    logger.info(f"Generating video for post {post.id}, script {post.script_id}")
                    result = generate_video_task.delay(post.script_id)
                    post.status = "generating_video"
                    db.commit()
                    continue
                
                # 3. Publish video
                logger.info(f"Publishing video {post.video_id} for post {post.id}")
                platforms = []
                if post.publish_to_telegram:
                    platforms.append("telegram")
                if post.publish_to_youtube:
                    platforms.append("youtube")
                if post.publish_to_tiktok:
                    platforms.append("tiktok")
                if post.publish_to_instagram:
                    platforms.append("instagram")
                
                if platforms:
                    publish_video_task.delay(post.video_id, platforms)
                    post.status = "published"
                    post.published_at = datetime.utcnow()
                    db.commit()
                    logger.info(f"Post {post.id} published to {', '.join(platforms)}")
            
            except Exception as e:
                logger.error(f"Error processing post {post.id}: {e}")
                post.status = "failed"
                post.error_message = str(e)
                db.commit()
                
                scheduler_service.log_automation_error(
                    db,
                    f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ {post.id}",
                    str(e)
                )
        
        return {"processed": len(pending_posts)}
    
    finally:
        db.close()


@celery_app.task
def check_and_notify_errors_task():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç unnotified errors –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å
    """
    db = SessionLocal()
    try:
        unnotified_errors = db.query(AutomationLog).filter(
            AutomationLog.level == "ERROR",
            AutomationLog.notified == False
        ).limit(10).all()
        
        if not unnotified_errors:
            return {"notified": 0}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        error_messages = []
        for log in unnotified_errors:
            error_messages.append(f"‚Ä¢ {log.message}")
            if log.details:
                error_messages.append(f"  ‚îî‚îÄ {log.details[:200]}")
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
        try:
            from ..services.telegram_bot import send_error_notification
            import asyncio
            
            notification = f"üö® –û—à–∏–±–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ ({len(unnotified_errors)}):\n\n" + "\n".join(error_messages[:10])
            asyncio.run(send_error_notification(notification))
            
            # –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
            for log in unnotified_errors:
                log.notified = True
            db.commit()
            
            logger.info(f"Sent {len(unnotified_errors)} error notifications")
            return {"notified": len(unnotified_errors)}
        
        except Exception as e:
            logger.error(f"Failed to send notifications: {e}")
            return {"notified": 0, "error": str(e)}
    
    finally:
        db.close()


# Configure Celery Beat schedule
@celery_app.on_after_configure.connect
def setup_periodic_tasks(sender, **kwargs):
    """Setup periodic tasks for automation"""
    
    # Create daily schedule at 00:01
    sender.add_periodic_task(
        crontab(hour=0, minute=1),
        create_daily_schedule_task.s(),
        name='create-daily-schedule'
    )
    
    # Process pending posts every 5 minutes
    sender.add_periodic_task(
        60.0 * 5,  # 5 minutes
        process_pending_posts_task.s(),
        name='process-pending-posts'
    )
    
    # Check and notify errors every hour
    sender.add_periodic_task(
        60.0 * 60,  # 1 hour
        check_and_notify_errors_task.s(),
        name='check-notify-errors'
    )

